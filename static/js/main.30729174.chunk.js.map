{"version":3,"sources":["Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tab","props","state","parent","child","leftItem","bind","rightItem","e","console","log","this","setState","onClick","upItem","class","downItem","deleteItem","className","content","React","Component","itemsArray","ItemList","handleSubmit","preventDefault","standard","current","value","length","replace","error","concat","createRef","param","indexOf","update","to","from","target","increment","k","filteredArray","filter","item","map","colspan","type","ref","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.30729174.chunk.js","sourcesContent":["import React from 'react';\n\nclass Tab extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state = {\n        parent:false,\n        child:false,\n      }\n      this.leftItem = this.leftItem.bind(this);\n      this.rightItem = this.rightItem.bind(this);\n    }\n  \n    leftItem(e){\n      console.log(\"left\",e);\n      if(this.state.child === true){\n        this.setState({child: false});\n      }else{\n        if(this.state.parent === true){\n        this.setState({parent: false});\n      }}\n    }\n  \n    rightItem(e){\n      console.log(\"right\",e);\n      if(this.state.parent === true){\n        this.setState({child: true});\n      }else{\n        if(this.state.parent === false){\n         this.setState({parent: true});\n        } \n      }\n    }\n  \n    render() {\n      return(\n      <tr>\n        <td>\n          \n          <i onClick={this.props.upItem }  class=\"fa fa-arrow-circle-up\t fa-3x\"></i>\n          <i onClick={this.props.downItem }  class=\"fa fa-arrow-circle-down fa-3x\"></i>\n          <i onClick={(e)=>{this.leftItem(e)}} class=\"fa fa-arrow-circle-left fa-3x\"></i>\n          <i onClick={(e)=>{this.rightItem(e)}}  class=\"fa fa-arrow-circle-right fa-3x\"></i>\n          <i onClick={this.props.deleteItem } class=\"fa fa-trash-o fa-3x\"></i>\n          \n        </td>\n        <td className={ `list-item ${this.state.parent ? \"shiftInside\" : \"\"} ${this.state.child ? \"shiftDeepInside\" : \"\"}` }>   { this.props.content }\n        </td>\n     </tr>);\n    }\n  }\n\n  export default Tab;","import React from 'react';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\nimport Tab from './Tab';\nconst itemsArray = [];\n\n\nclass ItemList extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      error : null,\n      itemsArray,\n      value:'',\n      parent:false,\n      child:false,\n    }\n\n    this.standard = React.createRef();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.upItem = this.upItem.bind(this);\n    this.downItem = this.downItem.bind(this); \n    this.deleteItem = this.deleteItem.bind(this);\n\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n    \n    console.log(this.standard.current.value.length);\n     if(this.standard.current.value.replace(/\\s+/, \"\").length === 0){\n       this.setState({error:'null'}); \n     }else{\n       this.setState({error:null}); \n       this.setState({value:this.standard.current.value}); \n       this.setState(state => {\n        const itemsArray = state.itemsArray.concat(state.value);\n        return {\n          itemsArray,\n          value: '',\n        };\n      });\n    }\n    this.standard.current.value = null;\n  };\n\n  upItem(param){\n\n    if(this.state.itemsArray.indexOf(param)>0){\n      var update = this.state.itemsArray;\n      var to = update.indexOf(param);\n      var from = update.indexOf(param)-1;\n      var target = update[from];                        \n      var increment = to < from ? -1 : 1;\n      for(var k = from; k != to; k += increment){\n        update[k] = update[k + increment];\n      }\n      update[to] = target;\n      this.setState({itemsArray:update});\n\n    } \n        \n  }\n  downItem(param){\n    if(this.state.itemsArray.indexOf(param) < this.state.itemsArray.length-1){\n      var update = this.state.itemsArray;\n      var to = update.indexOf(param);\n      var from = update.indexOf(param)+1;\n      var target = update[from];                        \n      var increment = to < from ? -1 : 1;\n      for(var k = from; k != to; k += increment){\n        update[k] = update[k + increment];\n      }\n      update[to] = target;\n      this.setState({itemsArray:update});\n    } \n  }\n\n  \n\n  deleteItem(param){\n   \n     let filteredArray = this.state.itemsArray.filter(item => item !== param);\n     this.setState({itemsArray: filteredArray});\n  }\n \n\n\n  render() {\n    \n    console.log(this.state.itemsArray);\nreturn (\n        <div className=\"MainContainer\">\n      <h4 className=\"heading\">MATHEMATICS</h4>\n      <table>\n            <thead>\n              <tr>\n              <th >Action <br /> \n              <span >Up,Down,Outdent,Indent,Delete</span>\n              </th>\n              <th className=\"LeftHead\">Standard <br /> \n                <span >The text of the standard</span>\n              </th>\n              </tr>\n              \n            </thead>\n           \n                \n            \n            <tbody>\n            {this.state.itemsArray.map(item => (\n              <Tab \n              content={item}\n              upItem={() => this.upItem(item)}\n              downItem={() => this.downItem(item)}\n              deleteItem={() => this.deleteItem(item)}\n            />\n              \n             ))}\n\n              <tr>\n                <td colspan = \"4\"> \n                    <input type=\"text\" ref={this.standard} placeholder=\"Type Standard here\"/>\n                </td>\n              </tr>\n              <tr>\n                <td className=\"Button\" colspan = \"4\" >\n                    <button onClick={this.handleSubmit}><i class=\"fa fa-plus-circle\"></i> Add a Standard\n                    </button>\n                </td>\n              </tr>\n              \n          </tbody>\n          </table>\n          <div>\n\n          </div>\n        </div>\n\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n        <ItemList/>\n    </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}